Logging:-
=============================
Logging
Logging is a means of tracking events that happen when some software runs. Logging is important for software developing, debugging, and running. If you don’t have any logging record and your program crashes, there are very few chances that you detect the cause of the problem. And if you detect the cause, it will consume a lot of time. With logging, you can leave a trail of breadcrumbs so that if something goes wrong, we can determine the cause of the problem. 
There are a number of situations like if you are expecting an integer, you have been given a float and you can a cloud API, the service is down for maintenance, and much more. Such problems are out of control and are hard to determine. 


• Logger.info(msg) : This will log a message with level INFO on this logger.
• Logger.warning(msg) : This will log a message with a level WARNING on this logger.
• Logger.error(msg) : This will log a message with level ERROR on this logger.
• Logger.critical(msg) : This will log a message with level CRITICAL on this logger.
• Logger.log(lvl,msg) : This will Logs a message with integer level lvl on this logger.
• Logger.exception(msg) : This will log a message with level ERROR on this logger.
• Logger.setLevel(lvl) : This function sets the threshold of this logger to lvl. This means that all the messages below this level will be ignored.
• Logger.addFilter(filt) : This adds a specific filter filt into this logger.
• Logger.removeFilter(filt) : This removes a specific filter filt into this logger.
• Logger.filter(record) : This method applies the logger’s filter to the record provided and returns True if the record is to be processed. Else, it will return False.
• Logger.addHandler(hdlr) : This adds a specific handler hdlr to this logger.
• Logger.removeHandler(hdlr) : This removes a specific handler hdlr into this logger.
• Logger.hasHandlers() : This checks if the logger has any handler configured or not. 

Formatter:

A Formatter is a Python logging object that allows you to define the output format of log messages using format strings. These strings can include placeholders for LogRecord attributes, which will be replaced with the corresponding values when the log message is generated.

Ex.===>
formatter =logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
==========================================================================
ORAD--
============
	i)went through the auth.py.

Github==>
=======
i)try restore command.

